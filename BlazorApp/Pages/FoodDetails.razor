@inject MenuRepository MenuRepo 
@inject NavigationManager NavigationManager
@inject User User
@inject IToastService ToastService


<button @onclick=NavigateBack>
    <span class="iconify" data-icon="ep:back" data-width="40" data-height="40"></span>
    Back to @FromPage
</button>

<div class='food-details-comp'>
    <div class='content'>
        <img src=@FoodItem.ImgLink>
        <div class='header'>
            <h3 class='font-weight-bold'>@FoodItem.Name</h3>
            <h4 class='font-weight-bold'>$@FoodItem.Price</h4>
        </div>

        <p>@FoodItem.Description</p>

        @*Sides *@
        @if(FoodItem.Sides != null && FoodItem.Sides.Any())
        {
            <div class='sides'>
                <div class='d-flex p-2 align-items-center'>
                    <h4>Sides</h4>
                    <span class='subtitle'>(Choose one)</span>
                    <span class='mandatory-star'>*</span>
                </div>
                @foreach(var side in FoodItem.Sides)
                {
                    <div class='radio-button'>   
                        <input type="radio" id="@side" name="sides" value="@side" 
                            checked="@(SelectedSide == side)"
                            @onchange="@(() => { SelectedSide = side; })">
                        <label class='d-flex justify-content-between' for="@side">
                            <span>@side.Name</span>
                            @if(side.ExtraCost != 0)
                            {
                                <span class='subtitle font-weight-normal'> + $@string.Format("{0:N2}", side.ExtraCost)</span>
                            }
                        </label>
                    </div>
                }
            </div>
        }

        @*Special Instructions *@
        <div class='instructions'>
            <h4>Special Instructions</h4>

            <textarea id="instructions-field" name="instructions-field" 
            cols="40" rows="3" 
            @bind="@SpecialInstructions"
            placeholder="Please enter any special instructions (Optional)"></textarea>
        </div>

        @*Quantity *@
        <h4>Quantity</h4>
         <div class='quantity-container'>
            <button class="quantity-button red-button" id="decrease" 
                disabled=@IsDecreaseButtonDisabled()
                @onclick="DecreaseQuantity" value="Decrease Value">–</button>
            <input type="number" id="quantity-number" value="@SelectedQuantity" />
            <button class="quantity-button red-button" id="increase" 
            @onclick="IncreaseQuantity" value="Increase Value">+</button>
        </div>
        <br />

        @*Cart Button*@
        <div class='fixed-bottom'>
            <button class='cart-button red-button' @onclick=@(Update ? UpdateCart : AddToCart)>
                <span class="iconify align-self-center cart-icon" 
                data-icon="ant-design:shopping-cart-outline" 
                data-width="30" data-height="30"></span>
                <span class='button-title'>@(Update ? "Update" : "Add to Cart")</span>
                <br />
                <span>( $@string.Format("{0:N2}", CalculateCost()) )</span>

            </button>
        </div>
    </div>


</div>


@code 
{
    [Parameter]
    public MenuItem FoodItem { get; set; }
    [Parameter]
    public OrderItem CartItem { get; set; }

    [Parameter]
    public Action NavigateBack { get; set; }
    [Parameter]
    public string FromPage { get; set; }

    [Parameter]
    public bool Update{ get;  set; }


    public MenuSide SelectedSide { get; set; }
    public int SelectedQuantity { get; set; }
    public string SpecialInstructions { get; set; }

    protected override void OnInitialized()
    {   
        if(Update)
        {
            FoodItem = CartItem.MenuItem;
            SelectedSide = CartItem.Side;
            SelectedQuantity = CartItem.Quantity;
            SpecialInstructions = CartItem.SpecialInstructions;
        }
        else
        {
            SelectedQuantity = 1;
            if(FoodItem.Sides != null && FoodItem.Sides.Any())
            {
                SelectedSide = FoodItem.Sides.ElementAt(0);
            } 
        }
    }

    private async Task UpdateCart()
    {
        int index = User.Cart.FindIndex(item => item == CartItem);
        OrderItem newOrderItem = new OrderItem(FoodItem, SelectedQuantity, OrderStatus.PendingOrder, SelectedSide, SpecialInstructions);
        User.Cart[index] = newOrderItem;
        await ToggleTransition();
        NavigateBack();
        ToastService.ShowInfo($"Updated {FoodItem.Name}");
    }

    private async Task AddToCart()
    {
        OrderItem orderItem = new OrderItem(FoodItem, SelectedQuantity, OrderStatus.PendingOrder, SelectedSide, SpecialInstructions);
        User.Cart.Add(orderItem);
        Console.WriteLine($"AddToCart {orderItem}");
        await ToggleTransition();
        NavigateBack();
        ToastService.ShowInfo($"Added {FoodItem.Name} to Cart");
    }

    private bool IsDecreaseButtonDisabled()
    {
        return SelectedQuantity <= 1;
    }

    private void DecreaseQuantity()
    {
        if(SelectedQuantity > 1)
        {
            SelectedQuantity--;
        }
    }

    private void IncreaseQuantity()
    {
        SelectedQuantity++;
    }

    private double CalculateCost()
    {
        if(SelectedSide != null)    return FoodItem.Price + SelectedSide.ExtraCost;
        return FoodItem.Price;
    }

    public async Task ToggleTransition()
    {
        await Task.Delay(300);
    }
}
