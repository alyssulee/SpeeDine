@page "/order/SplitBill" 
@inject NavigationManager navigationManager
@inject MenuRepository MenuRepo  
@inject User User
@inject Table Table

<button @onclick = 'NavigateToOrder'>
    <span class="iconify" data-icon="ep:back" data-width="40" data-height="40"></span>
    <span class = 'go_back__text'>Back to Ordered</span>
</button>
<div class = 'overall__container'>

    <div class='wizard'>
        <span>
            <div class='active'>1</div>
            <div style='font-weight:bold'>Split Bill</div>
        </span>
        <span>
            <div class='shape'>2</div>
            <div>Billing</div>
        </span>
        <span>
            <div class='shape'>3</div>
            <div>Payment</div>
        </span>
        <span>
            <div class='shape'>4</div>
            <div>Review</div>
        </span>
        <div class="line"></div>
    </div>
    <h1>Split Bill</h1>

    <span class = 'first_line'>Tap items to add and remove it from your bill.</span>
    <span class = 'second_line'>Multiple people can select the same item to split the cost.</span>

    <div class = 'item__container'>
        @foreach(var billItem in @bill) 
        {
            <div class = 'dish_information__container' style='@ColorPerUser(billItem)' @onclick = '() => ItemClicked(billItem)' >
                <div class = 'dish_information__header'>
                    <span class = 'dish_name'>@billItem.TableItem.MenuItem.Name</span>
                    <span class = 'dish_price'>$@string.Format("{0:N2}", @billItem.TableItem.MenuItem.Price)</span>
                    @if (billItem.Payer.Count == 1)
                    {
                        <div class = 'who_is_paying__text'>@billItem.Payer[0].Name is paying for this</div>
                    }
                    else if (billItem.Payer.Count > 1)
                    {
                        <div>
                            @foreach(var payer in billItem.Payer)
                            {
                                <span>@payer.Name, </span>
                            }
                            <span>are sharing this</span>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

    <div class='fixed-bottom'>
        <div class = 'your_subtotal__container'>
            <span class = 'your_subtotal__text'>Your Subtotal</span>
            <span class = 'amount__text'>$@string.Format("{0:N2}", @CalculateSubtotal())</span>
        </div>
        <button class = 'red-button request-bill-button' disabled=@AllItemsChosen() style = "@changeColorRequestBtn" @onclick = 'NavigateToThankyouPage'>
            <span>Request Bill</span>
        </button>
    </div>

@code {

    List<BillItem> bill = new List<BillItem>();

    string changeColorRequestBtn;

    async void NavigateToThankyouPage(){
        //await ToggleTransition();
        navigationManager.NavigateTo("/thanks");        
    }

    private string ColorPerUser(BillItem billItem)
    {
        // yellow if item is shared
        if (billItem.Payer.Count > 1)
        {
            return "background-color: #a8c987";
        }
        else if (billItem.Payer.Count == 0)
        {
            return "background-color: grey";
        }
        // if item isn't shared, it's another color
        else
        {
            if (billItem.Payer[0].Id == 1)
            {
                return "background-color: #d96fa0";
            }
            else if (billItem.Payer[0].Id == 2)
            {
                return "background-color: #66b9cc";
            }
            else if (billItem.Payer[0].Id == 3)
            {
                return "background-color: #f5d96e";
            }
            else if (billItem.Payer[0].Id == 4)
            {
                return "background-color: silver";
            }
            else if (billItem.Payer[0].Id == 5)
            {
                return "background-color: orange";
            }
            else
            {
                return "background-color: lime";
            }
        }
    }

    private void ItemClicked(BillItem billItem)
    {

        // if user is already paying for it --> unselect item
        // if clicks item they're not paying for --> share item
        // if clicks item they're sharing --> unshare item

        User thisUser = billItem.Payer.Find(c => c.Id == 1);

        // user1 is not paying for item yet
        if (thisUser == null)
        {
            billItem.Payer.Add(Table.GuestList[0]);
        }
        // user1 is already paying for item
        else
        {
            billItem.Payer.Remove(Table.GuestList[0]);
        }

        CreateUserBill();

        StateHasChanged();
    }

    private void CreateUserBill()
    {
        foreach(var user in Table.GuestList)
        {
            user.Bill = new List<OrderItem>();
        }

        foreach (var billItem in bill)
        {
            if (billItem.Payer.Count == 1)
            {
                User payingUser = billItem.Payer.Find(c => c.Id == billItem.Payer[0].Id);
                payingUser.Bill.Add(billItem.TableItem);
            }
            else
            {
                double newPrice = billItem.TableItem.MenuItem.Price / billItem.Payer.Count;
                MenuItem copyItem = new MenuItem(billItem.TableItem.MenuItem.Id, billItem.TableItem.MenuItem.Name, billItem.TableItem.MenuItem.Description, newPrice, billItem.TableItem.MenuItem.ImgLink, billItem.TableItem.MenuItem.Categories, billItem.TableItem.MenuItem.Tags, billItem.TableItem.MenuItem.Sides, billItem.TableItem.MenuItem.isAlcoholic);
                OrderItem copyOrder = new OrderItem(billItem.TableItem.Id, copyItem, billItem.TableItem.Quantity, billItem.TableItem.OrderStatus, billItem.TableItem.Side, billItem.TableItem.SpecialInstructions);

                foreach (var payingUser in billItem.Payer)
                {
                    payingUser.Bill.Add(copyOrder);
                }
            }
        }
        // look thru all BillItems
        // if Payer.Count > 1, split cost of OrderItem in half, place it in 
        // if Payer.Count == 1, put Order
    }

    private double CalculateSubtotal()
    {
        double subtotal = 0.0;

        // just for user 1?
        foreach (var item in Table.GuestList[0].Bill)
        {
            subtotal = subtotal + item.MenuItem.Price;
        }

        return subtotal;
    }

    private bool AllItemsChosen()
    {
        foreach (var billItem in bill)
        {
            if (billItem.Payer.Count == 0) {
                return true;
            }
        }
        return false;
    }

    void NavigateToOrder() {
        navigationManager.NavigateTo("/order");
    }

    private void CreateBill()
    {
        // for each user in the table...
        foreach (var guest in Table.GuestList.ToList())
        {
            // for each item in that user's Orders...
            foreach (var orderItem in guest.Orders.ToList())
            {
                for (int i=0; i<orderItem.Quantity; i++)
                {
                    var billItem = new BillItem(orderItem, guest);
                    bill.Add(billItem);
                }
            }
            //RemoveItem(guest, orderItem);
        }
    }

    protected override void OnInitialized()
    {
        CreateBill();
    }

    public async Task ToggleTransition()
    {
        await Task.Delay(300);
    }
}
