@page "/order/SplitBill" 
@inject NavigationManager navigationManager
@inject MenuRepository MenuRepo  
@inject User User
@inject Table Table

<div class = 'overall__container'>

    <div class='wizard'>
        <span>
            <div class='active'>1</div>
            <div style='font-weight:bold'>Split Bill</div>
        </span>
        <span>
            <div class='shape'>2</div>
            <div>Billing</div>
        </span>
        <span>
            <div class='shape'>3</div>
            <div>Payment</div>
        </span>
        <span>
            <div class='shape'>4</div>
            <div>Review</div>
        </span>
        <div class="line"></div>
    </div>

    <div class = 'header__container'>
        <span class = 'go_back__text' @onclick = 'NavigateToOrder'>Go back</span>
        <h3 class = 'splitbill__text'>Split Bill</h3>
    </div>
    
    <span class = 'first_line'>Tap items to add and remove it from your bill.</span>
    <span class = 'second_line'>Multiple people can select the same item to split the cost.</span>

    <div class = 'item__container'>
        @{
            int counter = 0;
            int userValue = 0;
            @foreach(var user in Table.GuestList) {
                @* <h1>@user.Name</h1> *@
                @foreach(var orderItem in user.Orders) {
                    @for(var num = 0; num < orderItem.Quantity; num++) {
                        var localItem = counter;        // do this to get the value properly *@
                        var localUserValue = userValue;
                        @* Console.WriteLine(localItem);
                        Console.WriteLine("\n"); *@
                        <div class = 'dish_information__container' style = "@changeColor[localItem]" @onclick = '() => customUserChangeMethod(localItem, localUserValue)' >
                            <div class = 'dish_information__header'>
                                <span class = 'dish_name'>@orderItem.MenuItem.Name</span>
                                <span class = 'dish_price'>$@string.Format("{0:N2}", @orderItem.MenuItem.Price)</span>
                            </div>
                            @if(!customUserPaying[localItem]){
                                <span class = 'who_is_paying__text'>@user.Name is paying for this</span>
                            }
                        </div>
                        counter = counter + 1;
                     
                    } 
                }
                userValue++;
            }
        }
    </div>
</div>

    <div class='fixed-bottom'>
        <div class = 'your_subtotal__container'>
            <span class = 'your_subtotal__text'>Your Subtotal</span>
            <span class = 'amount__text'>$@string.Format("{0:N2}", @yourSubtotal)</span>
        </div>
        <button class = 'red-button request-bill-button' disabled = '@IsDisabled' style = "@changeColorRequestBtn" @onclick = 'NavigateToThankyouPage'>
            <span>Request Bill</span>
        </button>
    </div>

@code {


    protected bool IsDisabled {get; set;}
    public MenuCategory selectedCategory { get; set; }

    List<MenuItem> CartScreen = new List<MenuItem>();

    int total_dishes = 0;           //will be later used for the clicking on the dish purpose

    double[] priceStorage;

    string[] changeColor;

    bool[] customUserPaying;

    string changeColorRequestBtn;

    double constantSubtotal;

    double yourSubtotal = 0.0;

    async void NavigateToThankyouPage(){
        //await ToggleTransition();
        navigationManager.NavigateTo("/thanks");        
    }

    void customUserChangeMethod(int x, int userValue) {
        //Console.WriteLine(x);
        if(!customUserPaying[x] && userValue == 0) {
            customUserPaying[x] = true;
            changeColor[x] = "background-color: #C1C1C1";
            @* subtracting this item from the subtotal now *@
            yourSubtotal-=priceStorage[x];
            if(yourSubtotal != constantSubtotal){
                IsDisabled = true;
                changeColorRequestBtn = "background-color:rgb(218, 196, 196)";
            }
        }
            
        else{
            customUserPaying[x] = false;
            changeColor[x] = "background-color:#F4A0A0";
            yourSubtotal+=priceStorage[x];
            if(yourSubtotal == constantSubtotal){
                IsDisabled = false;
                changeColorRequestBtn = "background-color:#F4A0A0";
            }
        }
        StateHasChanged();
    }

    void NavigateToOrder() {
        navigationManager.NavigateTo("/order");
    }
    

    protected override void OnInitialized()
    {
        selectedCategory = MenuCategory.Dinner;
        Showorder();
        priceStorage = new double[50];
        foreach(var cartItem in CartScreen) {
            priceStorage[total_dishes] = cartItem.Price;
            total_dishes+=1;
            yourSubtotal+=cartItem.Price;
        }
        constantSubtotal = yourSubtotal;            //so that this doesnt change and we can use it for request bill checking
        customUserPaying = new bool[total_dishes];      // all will be false
        changeColor = new String[total_dishes];
        for(int i = 0; i<total_dishes; i++){
            changeColor[i] = "background-color:#F4A0A0";
        }

        changeColorRequestBtn = "background-color:#F4A0A0";  //as initially all the dishes are selected
        StateHasChanged();
    }

    private void Showorder()
    {
        CartScreen = MenuRepo.GetMenuByCategory(selectedCategory);
    }

}
