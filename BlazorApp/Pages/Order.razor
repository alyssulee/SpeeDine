@page "/order" 
@inject NavigationManager navigationManager
@inject MenuRepository MenuRepo  
@inject Table Table
@inject User User

<link rel="stylesheet" href="_content/Syncfusion.Blazor.Themes/bootstrap5.css">

<div class='Orders-screen'> 
    @*Non-empty Orders page*@
    @if (!OrdersEmpty())
    {
        @* @if(!isEntireBillVisible) // when looking at regular Orders screen
        { *@
            <h1>Ordered</h1>
            @foreach(var user in Table.GuestList) // for each user in table...
            {
                <div class='guest-name'>
                    <span>@user.Name</span>
                    @if (user.Id == 1) // if user is singleton (hard-coded)
                    {
                        <span> (YOU)</span>
                    }
                </div>
                @foreach(var orderItem in user.Orders)
                {
                    @for (var num = 0; num < orderItem.Quantity; num++) // should be two different entries for one item
                    {
                        <div class='cartitem'>
                            <div class='cart-display'>
                                <img src=@orderItem.MenuItem.ImgLink>
                                <div style='padding: .5rem; flex-grow: 2;'>
                                <div class='priceset'>
                                    <p style="font-weight:bold; margin-right:auto; position: relative">@orderItem.MenuItem.Name ($@string.Format("{0:N2}", @orderItem.MenuItem.Price))</p>
                                </div>
                                @if (orderItem.Side != null)
                                {
                                   <div class='details'>
                                    <span style="font-weight:bold">Side: </span>
                                    <span style="@StyleForSides(orderItem)">@SideChosen(orderItem)</span>
                                </div> 
                                }                                
                                 @if(orderItem.SpecialInstructions != null)
                                {
                                    <div class='details'>
                                        <span style="font-weight:bold">Special instructions: </span>
                                        <span style="@StyleForInstructions(orderItem)">@InstructionGiven(orderItem)</span>
                                    </div>
                                }
                                <b style=@StyleForOrderItem(orderItem)> @orderItem.OrderStatus </b>
                                </div>
                            </div>
                        </div>
                    }
                }
                if (user.Orders.Count > 0)
                {
                    <div class='CalculateSubtotal'>
                        <div class = 'subtotal'>Subtotal: </div>
                            <div class = 'subtotal_cost'>$@string.Format("{0:N2}", @TotalCost(user))</div>
                    </div>
                }
            }

            @* starting my bill screen from here, (SUVRAT). *@
            @* made a few changes in the beginning, (Shafin). *@
            <div class='fixed-bottom'>
                <div class='table_total_container'>
                    <div class = 'tabletotal'>Table Total: </div>
                    <div class = 'table_cost'>$@string.Format("{0:N2}", @TableCost())</div> 
               </div>
                <div class='bill_screen__container'>
                    <div>
                        <h3> Ready to Pay?</h3>
                    </div>
                    <div class='how_to_pay__container'> 
                        <button class = 'entire_bill__button' @onclick=NavigateToEntireBill>Entire Bill</button>
                        <button class = 'split_bill__button' @onclick=NavigateToSplitBill>Split the Bill</button>
                    </div>
                    <br>
                </div> 
            </div>
        }
    @*Empty Page*@
    else {
        <div class='empty centered'>
           <svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink"  alignment-baseline xmlns:svgjs="http://svgjs.com/svgjs" width="150" height="150" x="0" y="0" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><path xmlns="http://www.w3.org/2000/svg" d="m512 245.396c0-13.785-11.215-25-25-25h-462c-13.785 0-25 11.215-25 25 0 38.047 30.953 69 69 69h31.33c-.356.513-.71 1.03-1.053 1.554l-30.827 47.052h-53.45c-8.284 0-15 6.716-15 15s6.716 15 15 15h61.555c5.058 0 9.775-2.549 12.547-6.78l35.269-53.832c7.22-11.02 19.396-17.599 32.57-17.599h100.307c7.096 0 12.868 5.772 12.868 12.868s-5.772 12.868-12.868 12.868h-41.353c-23.638 0-42.868 19.23-42.868 42.868 0 23.637 19.23 42.868 42.868 42.868h43.871c12.914 0 25.472-4.572 35.362-12.875l104.623-87.826c5.008-4.205 12.108-4.715 17.667-1.271 5.212 3.229 6.619 8.082 6.995 10.686.375 2.604.394 7.657-3.695 12.226l-101.243 113.14c-12.316 13.764-29.971 21.657-48.438 21.657h-256.037c-8.284 0-15 6.716-15 15s6.716 15 15 15h256.037c26.991 0 52.794-11.536 70.793-31.65l101.244-113.14c8.917-9.965 12.938-23.271 11.032-36.507-.853-5.922-2.855-11.517-5.818-16.53 35.583-2.712 63.712-32.511 63.712-68.777zm-69 39h-374c-19.812 0-36.22-14.847-38.681-34h451.362c-2.461 19.153-18.869 34-38.681 34zm-167.16 106.016c-4.496 3.774-10.204 5.852-16.074 5.852h-43.871c-7.096 0-12.868-5.772-12.868-12.868s5.772-12.868 12.868-12.868h41.353c23.638 0 42.868-19.23 42.868-42.868 0-4.629-.747-9.084-2.11-13.264h68.388z" fill="#575757" data-original="#000000" class=""></path><path xmlns="http://www.w3.org/2000/svg" d="m374.75 171.259c0 8.284 6.716 15 15 15h39.167c8.284 0 15-6.716 15-15s-6.716-15-15-15h-39.167c-8.284 0-15 6.716-15 15z" fill="#575757" data-original="#000000" class=""></path><path xmlns="http://www.w3.org/2000/svg" d="m363.139 112.855c3.285 0 6.593-1.075 9.358-3.286l30.589-24.461c6.47-5.174 7.521-14.613 2.347-21.083s-14.612-7.521-21.083-2.347l-30.589 24.462c-6.47 5.174-7.521 14.613-2.347 21.083 2.963 3.705 7.323 5.632 11.725 5.632z" fill="#575757" data-original="#000000" class=""></path><path xmlns="http://www.w3.org/2000/svg" d="m292.128 66.58c1.524.489 3.069.722 4.588.722 6.343 0 12.236-4.056 14.279-10.419l11.971-37.292c2.532-7.888-1.81-16.334-9.698-18.867-7.886-2.532-16.334 1.811-18.867 9.698l-11.971 37.291c-2.532 7.888 1.81 16.334 9.698 18.867z" fill="#575757" data-original="#000000" class=""></path><path xmlns="http://www.w3.org/2000/svg" d="m201.005 56.882c2.043 6.364 7.935 10.419 14.279 10.419 1.519 0 3.064-.232 4.588-.722 7.888-2.532 12.23-10.979 9.698-18.867l-11.971-37.292c-2.532-7.888-10.98-12.232-18.867-9.698-7.888 2.532-12.23 10.979-9.698 18.867z" fill="#575757" data-original="#000000" class=""></path><path xmlns="http://www.w3.org/2000/svg" d="m108.914 85.108 30.589 24.461c2.766 2.211 6.073 3.286 9.358 3.286 4.401 0 8.762-1.928 11.725-5.632 5.174-6.47 4.123-15.909-2.347-21.083l-30.589-24.462c-6.471-5.174-15.91-4.123-21.083 2.347s-4.123 15.909 2.347 21.083z" fill="#575757" data-original="#000000" class=""></path><path xmlns="http://www.w3.org/2000/svg" d="m83.083 186.259h39.167c8.284 0 15-6.716 15-15s-6.716-15-15-15h-39.167c-8.284 0-15 6.716-15 15s6.716 15 15 15z" fill="#575757" data-original="#000000" class=""></path></g></svg> <br/><br/>
            <span>No orders placed yet. Make sure to place your order in the cart!</span>
        </div>
    }
</div>

@code 
{

    List<MenuCategory> categories = Enum.GetValues(typeof(MenuCategory)).Cast<MenuCategory>().ToList();

    public MenuCategory selectedCategory { get; set; }
    public List<MenuItem> CartScreen = new List<MenuItem>();

    double total = 0.0;
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private double TotalCost(User user) 
    {
        total = 0.0;    // so that if you go back again the price resets.
        foreach(var cartItem in user.Orders) {
            total+=cartItem.MenuItem.Price*cartItem.Quantity;
        }
        return total;
    }

    

    private double TableCost()
    {
        total = 0.0;
        foreach(var user in Table.GuestList)
        {
            foreach(var cartItem in user.Orders) {
                total+=cartItem.MenuItem.Price*cartItem.Quantity;
            }
        }
        return total;
    }

    private bool OrdersEmpty()
    {
        foreach (var guest in Table.GuestList.ToList())
        {
            if (guest.Orders.Count > 0) {
                return false;
            }
        }
        return true;    
    }

    private string StyleForOrderItem(OrderItem item)
    {
        string style = "";
        if (item.OrderStatus  == OrderStatus.Waiting)
        {
            style = "color: #CA2121; font-size: 15px;";
        }
        else
        {
            style = "color: #0B8A08; font-size: 15px;";
        }
        return style;
    }

    private string StyleForSides(OrderItem orderItem)
    {
        string style = "";
        if (orderItem.Side == null)
        {
            style = "font-style: italic";
        }
        return style;
    }

    private string StyleForInstructions(OrderItem orderItem)
    {
        string style = "";
        if (orderItem.SpecialInstructions == null)
        {
            style = "font-style: italic";
        }
        return style;
    }

    private string SideChosen(OrderItem orderItem)
    {
        string printSide = "No side chosen";
        if (orderItem.Side != null)
        {
            printSide = orderItem.Side.Name;
        }
        return printSide;
    }

    private string InstructionGiven(OrderItem orderItem)
    {
        string printInstructions = "No special instructions provided";
        if (orderItem.SpecialInstructions != null)
        {
            printInstructions = orderItem.SpecialInstructions;
        }
        return printInstructions;
    }

    private void NavigateToEntireBill() {
        navigationManager.NavigateTo("/order/EntireBill");
    }

    private void NavigateToSplitBill() 
    {
        navigationManager.NavigateTo("/order/SplitBill");
    }

 }
