@page "/cart"

@inject IJSRuntime JsRuntime
@inject MenuRepository MenuRepo
@inject Table Table
@inject User User

@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager

<div class='cart'>
    <h1>Cart</h1>

    @*Cart*@
    <ul>
        @foreach(var user in Table.GuestList)   
        {
            <li>
                <div class='guest-name'>
                    <b>@user.Name @SelectedUser(user)</b>
                </div>
                @foreach(var orderItem in user.Cart)
                {
                    <li class='cart-item'>
                        <div class='cart-item-container'>
                            <img src=@orderItem.MenuItem.ImgLink>
                            <div style='padding: 0.5rem; flex-grow: 1;'>
                                 <div class='row'>
                                    <p style="font-weight:bold; margin-right:auto">@orderItem.MenuItem.Name</p>
                                    <p style="margin-left:auto">$@orderItem.MenuItem.Price</p>
                                </div>
                                <div class='details'>
                                    <span style="font-weight:bold">Side: </span>
                                    <span body style="@StyleForSides(orderItem)">@SideChosen(orderItem)</span>
                                </div>
                                <div class='details'>
                                    <span style="font-weight:bold">Special instructions: </span>
                                    <span style="@StyleForInstructions(orderItem)">@InstructionGiven(orderItem)</span>
                                </div>
                                 <div class='quantity-container'>
                                    <button class="quantity-button red-button" @onclick="@(() => { DecrementQuantity(orderItem);})">-</button>
                                    <input type="number" id="quantity-number" value=@orderItem.Quantity />
                                    <button class="quantity-button red-button" @onclick="@(() => { IncrementQuantity(orderItem);})">+</button>
                                </div>
                            </div>
                        </div>
                        <div class='row'>
                            <img class="edit-button" @onclick="@(() => { OpenUpdateFoodDetailsPage(orderItem.MenuItem);})" align="right" src="https://cdn.pixabay.com/photo/2019/04/08/20/26/pencil-4112898_960_720.png">
                        </div>
                    </li>
                }
            </li>
        }
    </ul>
</div>
<div class='fixed-bottom'>
    <button class='place-order-btn' @onclick="@(() => { PlaceOrder();})">
        Place Table Order
    </button>
</div>

@code 
{
    // TODO:
    //  handle input from the Quantity text boxes
    #region Attributes

    // GUI Bindings

    #endregion

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void OpenUpdateFoodDetailsPage(MenuItem menuItem)
    {
        NavigationManager.NavigateTo($"menu/details/{menuItem.Id}");
    }

    private string SelectedUser(User user)
    {
        string selectedUser = "";
        if (user.Id == 1) // hardcoded to Guest 1; fix this
        {
            selectedUser = "(YOU)";
        }
        return selectedUser;
    }

    private string SideChosen(OrderItem orderItem)
    {
        string printSide = "No side chosen";
        if (orderItem.Side != null)
        {
            printSide = orderItem.Side.Name;
        }
        return printSide;
    }

    private string InstructionGiven(OrderItem orderItem)
    {
        string printInstructions = "No special instructions provided";
        if (orderItem.SpecialInstructions != null)
        {
            printInstructions = orderItem.SpecialInstructions;
        }
        return printInstructions;
    }

    private string StyleForSides(OrderItem orderItem)
    {
        string style = "";
        if (orderItem.Side == null)
        {
            style = "font-style: italic";
        }
        return style;
    }

    private string StyleForInstructions(OrderItem orderItem)
    {
        string style = "";
        if (orderItem.SpecialInstructions == null)
        {
            style = "font-style: italic";
        }
        return style;
    }

    private void IncrementQuantity(OrderItem item)
    {
        item.Quantity++;
    }

    private void DecrementQuantity(OrderItem item)
    {
        if (item.Quantity > 0)
        {
            item.Quantity--;
        }
        else
        {
            item.Quantity = 0;
        }
    }

    private void PlaceOrder()
    {
        // for each user in the table...
        for (int i=0; i<Table.GuestList.Capacity; i++)
        {
            // for each item in that user's Cart...
            for (int j=0; j<Table.GuestList[i].Cart.Capacity; j++)
            {
                Table.GuestList[i].Orders.Add(Table.GuestList[i].Cart[j]);
            }
            
        }
        NavigationManager.NavigateTo($"menu");
    }
}