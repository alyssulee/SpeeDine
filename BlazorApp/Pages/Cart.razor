@page "/cart"

@inject IJSRuntime JsRuntime
@inject MenuRepository MenuRepo
@inject Table Table
@inject User User

@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager

<div class='cart'>
    <h1>Cart</h1>

    @*Cart*@
    @if (!CartEmpty()) {
        <ul>
            @foreach(var user in Table.GuestList)   
            {
                <li>
                    <div class='guest-name'>
                        <b>@user.Name @SelectedUser(user)</b>
                    </div>
                    @foreach(var orderItem in user.Cart)
                    {
                        <li class='cart-item'>
                            <button class="remove-btn" @onclick="@(() => { RemoveItem(user,orderItem);})">x</button>
                            <div class='cart-item-container'>
                                <img src=@orderItem.MenuItem.ImgLink>
                                <div style='padding: 0.5rem; flex-grow: 1;'>
                                     <div class='row'>
                                        <p style="font-weight:bold; margin-right:auto; position: relative">@orderItem.MenuItem.Name ($@string.Format("{0:N2}", @TotalPrice(orderItem)))</p>
                                    </div>
                                    <div class='details'>
                                        <span style="font-weight:bold">Side: </span>
                                        <span body style="@StyleForSides(orderItem)">@SideChosen(orderItem)</span>
                                    </div>
                                    <div class='details'>
                                        <span style="font-weight:bold">Special instructions: </span>
                                        <span style="@StyleForInstructions(orderItem)">@InstructionGiven(orderItem)</span>
                                    </div>
                                     <div class='quantity-container'>
                                        <button class="quantity-button red-button" disabled=@IsDecreaseButtonDisabled(orderItem) @onclick="@(() => { DecrementQuantity(orderItem);})">-</button>
                                        <input type="number" value=@orderItem.Quantity />
                                        <button class="quantity-button red-button" @onclick="@(() => { IncrementQuantity(orderItem);})">+</button>
                                    </div>
                                </div>
                            </div>
                            <div class='row'>
                                <img class="edit-button" @onclick="@(() => { OpenUpdateFoodDetailsPage(orderItem);})" align="right" src="https://cdn.pixabay.com/photo/2019/04/08/20/26/pencil-4112898_960_720.png">
                            </div>
                        </li>
                    }
                </li>
            }
        </ul>
    }
    @*Empty Page*@
    else {
        <div class='empty centered'>
            <span>Your table's cart is empty. Try adding items from the menu!</span>
        </div>
    }

</div>
<div class='fixed-bottom'>
    <button class='place-order-btn' disabled=@CartEmpty() @onclick="@(() => { PlaceOrder();})">
        Place Table Order
    </button>
</div>


@*Food Details*@
@if(ShowUpdateFoodDetails)
{
    <div class='food-details-popup'>
        <FoodDetails CartItem=@SelectedCartItem 
                    NavigateBack=@CloseFoodDetailsPage           
                    Update="true"
                    FromPage='Cart'/>
    </div>
    <div class='black-overlay-popup' @onclick="@(() => {ShowUpdateFoodDetails=false;})"></div>
}

@code 
{
    #region Attributes

    // GUI Bindings
    int updatedQuantity;

    bool ShowUpdateFoodDetails= false;
    OrderItem SelectedCartItem { get; set; }    

    #endregion

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void OpenUpdateFoodDetailsPage(MenuItem menuItem)
    {
        NavigationManager.NavigateTo($"menu/details/{menuItem.Id}"); // this address is wrong
    }


    /* Food Details */
    public void OpenUpdateFoodDetailsPage(OrderItem item)
    {
        ShowUpdateFoodDetails = true;
        SelectedCartItem = item;
    }

    private void CloseFoodDetailsPage()
    {
        ShowUpdateFoodDetails = false;
        StateHasChanged();
    }

    private bool CartEmpty()
    {
        foreach (var guest in Table.GuestList.ToList())
        {
            if (guest.Cart.Count > 0) {
                return false;
            }
        }
        return true;
    }

    private void RemoveItem(User user, OrderItem item)
    {
        foreach (var cartItem in user.Cart.ToList())
        {
            if (cartItem.Id == item.Id)
            {
                //var itemToRemove = user.Cart.Single(r => r.Id == item.Id);
                //user.Cart.Remove(itemToRemove);
                user.Cart.Remove(cartItem);
            }
        }
    }

    private string SelectedUser(User user)
    {
        string selectedUser = "";
        if (user.Id == 1) // hardcoded to Guest 1; fix this
        {
            selectedUser = "(YOU)";
        }
        return selectedUser;
    }

    private string SideChosen(OrderItem orderItem)
    {
        string printSide = "No side chosen";
        if (orderItem.Side != null)
        {
            printSide = orderItem.Side.Name;
        }
        return printSide;
    }

    private string InstructionGiven(OrderItem orderItem)
    {
        string printInstructions = "No special instructions provided";
        if (orderItem.SpecialInstructions != null)
        {
            printInstructions = orderItem.SpecialInstructions;
        }
        return printInstructions;
    }

    private string StyleForSides(OrderItem orderItem)
    {
        string style = "";
        if (orderItem.Side == null)
        {
            style = "font-style: italic";
        }
        return style;
    }

    private string StyleForInstructions(OrderItem orderItem)
    {
        string style = "";
        if (orderItem.SpecialInstructions == null)
        {
            style = "font-style: italic";
        }
        return style;
    }

    private double TotalPrice(OrderItem orderItem)
    {
        return orderItem.MenuItem.Price * orderItem.Quantity;
    }

    private bool IsDecreaseButtonDisabled(OrderItem item)
    {
        return item.Quantity <= 1;
    }

    private void IncrementQuantity(OrderItem item)
    {
        item.Quantity++;
    }

    private void DecrementQuantity(OrderItem item)
    {
        if (item.Quantity > 1)
        {
            item.Quantity--;
        }
        else
        {
            item.Quantity = 1;
        }
    }

    private void WriteQuantity(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        int newValue = (int)args.Value;
        if (newValue >= 0)
        {
            updatedQuantity = newValue;
        }
    }

    private void PlaceOrder()
    {
        // for each user in the table...
        foreach (var guest in Table.GuestList.ToList())
        {
            // for each item in that user's Cart...
            foreach (var cartItem in guest.Cart.ToList())
            {
                guest.Orders.Add(cartItem);
                RemoveItem(guest, cartItem);
            }
            
        }
        NavigationManager.NavigateTo($"menu/Popular");
    }
}