@page "/menu"

@inject IJSRuntime JsRuntime
@inject MenuRepository MenuRepo 
@inject User User 
@inject NavigationManager NavigationManager

@*Categories*@
<div class='category-bar'>
    <button class='left-arrow' >&lsaquo;</button>
    <div class='scroll-categories' id='scroll-categories'>
        <div class='categories'>
            @foreach(var category in categories)
            {
                <input type="radio" id="@category" name="categories" value="@category" 
                    style="display: none;" checked="@(selectedCategory == category)" 
                    @onchange="@(() => { selectedCategory = category; UpdateMenuCategory();})">
                <label class='category' for="@category">@category</label><br>
            }
        </div>
    </div>
    <button class='right-arrow'>&rsaquo;</button>
</div>

@*Menu*@
<div class='menu'>
    @*Filter*@
    <div>
        @*Filter button*@
        <button class='filter-button' @onclick=ShowFilterPopup>Filter</button>
        @*Filter popup*@
        @if(showFilterPopup)
        {
            <div class='filter-popup'>
                @foreach(var filter in filters)
                {
                    <input type="checkbox" id="@filter" name="@filter" value="@filter">
                    <label class='filter' for="@filter">@filter</label><br>
                }
            </div> 
        }
    </div>

    <h1>@selectedCategory</h1>

    @*Menu List*@
    <ul>
        @foreach(var menuItem in displayMenuList)
        {
            <li class='menu-item' @onclick="@(() => { OpenFoodDetailsPage(menuItem);})">
                <div class='menu-item-container'>
                    <img src=@menuItem.ImgLink>
                    <div style='padding: 0.5rem; flex-grow: 1;'>
                         <div class='row'>
                            <p style="font-weight:bold; margin-right:auto">@menuItem.Name</p>
                            <p style="margin-left:auto">$@menuItem.Price</p>
                        </div>
                        <div class='row'>
                            <p>@menuItem.Description</p>
                        </div>

                        <button class='pin-button @GetPinnedClass(menuItem)' 
                            @onclick:preventDefault="true"
                            @onclick:stopPropagation="true"
                            @onclick="@(() => TogglePinButton(menuItem))">
                            <span class="iconify pin-icon" data-icon="bi:pin-angle-fill" data-width="30" data-height="30"></span>
                        </button>
                    </div>
                </div>
            </li>
        }
    </ul>
</div>

@code 
{
    #region Attributes
    List<MenuCategory> categories = Enum.GetValues(typeof(MenuCategory)).Cast<MenuCategory>().ToList();
    List<MenuTags> filters = Enum.GetValues(typeof(MenuTags)).Cast<MenuTags>().ToList();
    #endregion

    #region GUI_Bindings
    public MenuCategory selectedCategory { get; set; }
    public List<MenuTags> selectedFilters = new List<MenuTags>();

    public bool showFilterPopup { get; set; }
    public List<MenuItem> displayMenuList = new List<MenuItem>();
    #endregion

    protected override void OnInitialized()
    {
        selectedCategory = MenuCategory.Popular;
        showFilterPopup = false;
        UpdateMenuCategory();
        base.OnInitialized();
    }

    private void OpenFoodDetailsPage(MenuItem menuItem)
    {
        NavigationManager.NavigateTo($"menu/details/{menuItem.Id}");
    }

    #region Categories/Filtering
    private void UpdateMenuCategory()
    {
        if(selectedCategory == MenuCategory.Pinned)
        {
            displayMenuList = User.PinnedItems;
        }
        else
        {
            displayMenuList = MenuRepo.GetMenuByCategory(selectedCategory);
        }
    }

    private void ShowFilterPopup()
    {
        showFilterPopup = !showFilterPopup;
    }
    #endregion

    #region Pinning 
    private string GetPinnedClass(MenuItem item)
    {
        return User.PinnedItems.Contains(item) ? "pinned" : "";
    }

    private void TogglePinButton(MenuItem item)
    {
        if(User.PinnedItems.Contains(item))
        {
            User.PinnedItems.Remove(item);   
        }
        else
        {
            User.PinnedItems.Add(item);   
        }
    }
    #endregion
}